{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Add a request interceptor to automatically handle token refreshes\naxios.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If error is 401 and has isExpired: true and we haven't tried refreshing already\n  if (error.response && error.response.status === 401 && error.response.data.isExpired === true && error.response.data.requiresRefresh === true && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Get current token from storage\n      const token = localStorage.getItem('token');\n\n      // If we have a token, try to refresh it\n      if (token) {\n        const response = await axios.post(`${API_URL}/auth/refresh`, {\n          token\n        });\n\n        // Save the new token\n        const newToken = response.data.token;\n        localStorage.setItem('token', newToken);\n\n        // Update the authorization header and retry the original request\n        originalRequest.headers['x-auth-token'] = newToken;\n        return axios(originalRequest);\n      }\n    } catch (refreshError) {\n      var _refreshError$respons, _refreshError$respons2;\n      // If refresh fails, redirect to login\n      console.error('Token refresh failed:', refreshError);\n\n      // Check if we need to force a login\n      if ((_refreshError$respons = refreshError.response) !== null && _refreshError$respons !== void 0 && (_refreshError$respons2 = _refreshError$respons.data) !== null && _refreshError$respons2 !== void 0 && _refreshError$respons2.requiresLogin) {\n        localStorage.removeItem('token');\n        // If you're using React Router, you might use history.push('/login') here\n        // or call a function that triggers a redirect\n        window.location.href = '/login?session=expired';\n      }\n    }\n  }\n\n  // If it's not a token issue or refresh failed, reject with the original error\n  return Promise.reject(error);\n});\nconst AuthService = {\n  login: async (email, password) => {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n  },\n  getCurrentUser: () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // You could decode the JWT here to get the user info without making an API call\n      // This is just a simple implementation\n      return {\n        isAuthenticated: true\n      };\n    }\n    return null;\n  },\n  // Manual token refresh method (can be used when needed)\n  refreshToken: async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return Promise.reject('No token found');\n    try {\n      const response = await axios.post(`${API_URL}/auth/refresh`, {\n        token\n      });\n      localStorage.setItem('token', response.data.token);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // Clear token if refresh fails\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.requiresLogin) {\n        localStorage.removeItem('token');\n      }\n      throw error;\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","interceptors","response","use","error","originalRequest","config","status","data","isExpired","requiresRefresh","_retry","token","localStorage","getItem","post","newToken","setItem","headers","refreshError","_refreshError$respons","_refreshError$respons2","console","requiresLogin","removeItem","window","location","href","Promise","reject","AuthService","login","email","password","logout","getCurrentUser","isAuthenticated","refreshToken","_error$response","_error$response$data"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/services/Authservice.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Add a request interceptor to automatically handle token refreshes\r\naxios.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 and has isExpired: true and we haven't tried refreshing already\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      error.response.data.isExpired === true &&\r\n      error.response.data.requiresRefresh === true &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Get current token from storage\r\n        const token = localStorage.getItem('token');\r\n        \r\n        // If we have a token, try to refresh it\r\n        if (token) {\r\n          const response = await axios.post(`${API_URL}/auth/refresh`, { token });\r\n          \r\n          // Save the new token\r\n          const newToken = response.data.token;\r\n          localStorage.setItem('token', newToken);\r\n          \r\n          // Update the authorization header and retry the original request\r\n          originalRequest.headers['x-auth-token'] = newToken;\r\n          return axios(originalRequest);\r\n        }\r\n      } catch (refreshError) {\r\n        // If refresh fails, redirect to login\r\n        console.error('Token refresh failed:', refreshError);\r\n        \r\n        // Check if we need to force a login\r\n        if (refreshError.response?.data?.requiresLogin) {\r\n          localStorage.removeItem('token');\r\n          // If you're using React Router, you might use history.push('/login') here\r\n          // or call a function that triggers a redirect\r\n          window.location.href = '/login?session=expired';\r\n        }\r\n      }\r\n    }\r\n    \r\n    // If it's not a token issue or refresh failed, reject with the original error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst AuthService = {\r\n  login: async (email, password) => {\r\n    const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  },\r\n  \r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n  },\r\n  \r\n  getCurrentUser: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // You could decode the JWT here to get the user info without making an API call\r\n      // This is just a simple implementation\r\n      return { isAuthenticated: true };\r\n    }\r\n    return null;\r\n  },\r\n  \r\n  // Manual token refresh method (can be used when needed)\r\n  refreshToken: async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return Promise.reject('No token found');\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/refresh`, { token });\r\n      localStorage.setItem('token', response.data.token);\r\n      return response.data;\r\n    } catch (error) {\r\n      // Clear token if refresh fails\r\n      if (error.response?.data?.requiresLogin) {\r\n        localStorage.removeItem('token');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default AuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}