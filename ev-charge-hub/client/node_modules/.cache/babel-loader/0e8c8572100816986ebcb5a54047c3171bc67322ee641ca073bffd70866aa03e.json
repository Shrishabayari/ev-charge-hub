{"ast":null,"code":"/**\r\n * BookingService.js\r\n * Service module for handling all Booking API interactions\r\n */\n\nimport axios from 'axios';\n\n// Base configuration for API requests\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.bunkservice.com/v1';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds timeout\n});\n\n// Request interceptor for adding auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('bunk_auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  // Handle specific error codes\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // Handle unauthorized - e.g., logout user, redirect to login\n        console.error('Authentication error, please log in again');\n        break;\n      case 403:\n        console.error('You do not have permission to perform this action');\n        break;\n      case 404:\n        console.error('The requested resource was not found');\n        break;\n      case 500:\n        console.error('Server error, please try again later');\n        break;\n      default:\n        console.error(`Error: ${error.response.status} - ${error.response.data.message || 'Unknown error'}`);\n    }\n  } else if (error.request) {\n    console.error('Network error, please check your connection');\n  } else {\n    console.error('Error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * BookingService - for managing bookings\r\n */\nexport const bookingService = {\n  // Get all bookings\n  getAllBookings: async () => {\n    try {\n      const response = await apiClient.get('/bookings');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get bookings for a specific bunk\n  getBookingsByBunk: async bunkId => {\n    try {\n      const response = await apiClient.get(`/bookings/bunk/${bunkId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get bookings for a specific user\n  getBookingsByUser: async userId => {\n    try {\n      const response = await apiClient.get(`/bookings/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get a single booking by ID\n  getBookingById: async bookingId => {\n    try {\n      const response = await apiClient.get(`/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Create a new booking\n  createBooking: async bookingData => {\n    try {\n      const response = await apiClient.post('/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Update an existing booking\n  updateBooking: async (bookingId, bookingData) => {\n    try {\n      const response = await apiClient.put(`/bookings/${bookingId}`, bookingData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Cancel a booking\n  cancelBooking: async bookingId => {\n    try {\n      const response = await apiClient.patch(`/bookings/${bookingId}/cancel`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Reschedule a booking\n  rescheduleBooking: async (bookingId, newSlotTime) => {\n    try {\n      const response = await apiClient.patch(`/bookings/${bookingId}/reschedule`, {\n        slotTime: newSlotTime\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get bookings statistics\n  getBookingStats: async () => {\n    try {\n      const response = await apiClient.get('/bookings/stats');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Filter bookings by date range\n  getBookingsByDateRange: async (startDate, endDate) => {\n    try {\n      const response = await apiClient.get('/bookings/daterange', {\n        params: {\n          startDate,\n          endDate\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Filter bookings by status\n  getBookingsByStatus: async status => {\n    try {\n      const response = await apiClient.get('/bookings/status', {\n        params: {\n          status\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Export individual methods directly\nexport const {\n  getAllBookings,\n  getBookingsByBunk,\n  getBookingsByUser,\n  getBookingById,\n  createBooking,\n  updateBooking,\n  cancelBooking,\n  rescheduleBooking,\n  getBookingStats,\n  getBookingsByDateRange,\n  getBookingsByStatus\n} = bookingService;\n\n// Export default as named object\nexport default bookingService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console","data","message","bookingService","getAllBookings","get","getBookingsByBunk","bunkId","getBookingsByUser","userId","getBookingById","bookingId","createBooking","bookingData","post","updateBooking","put","cancelBooking","patch","rescheduleBooking","newSlotTime","slotTime","getBookingStats","getBookingsByDateRange","startDate","endDate","params","getBookingsByStatus"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/services/BookingService.js"],"sourcesContent":["/**\r\n * BookingService.js\r\n * Service module for handling all Booking API interactions\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n// Base configuration for API requests\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.bunkservice.com/v1';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 10000, // 10 seconds timeout\r\n});\r\n\r\n// Request interceptor for adding auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('bunk_auth_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle specific error codes\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Handle unauthorized - e.g., logout user, redirect to login\r\n          console.error('Authentication error, please log in again');\r\n          break;\r\n        case 403:\r\n          console.error('You do not have permission to perform this action');\r\n          break;\r\n        case 404:\r\n          console.error('The requested resource was not found');\r\n          break;\r\n        case 500:\r\n          console.error('Server error, please try again later');\r\n          break;\r\n        default:\r\n          console.error(`Error: ${error.response.status} - ${error.response.data.message || 'Unknown error'}`);\r\n      }\r\n    } else if (error.request) {\r\n      console.error('Network error, please check your connection');\r\n    } else {\r\n      console.error('Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * BookingService - for managing bookings\r\n */\r\nexport const bookingService = {\r\n  // Get all bookings\r\n  getAllBookings: async () => {\r\n    try {\r\n      const response = await apiClient.get('/bookings');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get bookings for a specific bunk\r\n  getBookingsByBunk: async (bunkId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bookings/bunk/${bunkId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get bookings for a specific user\r\n  getBookingsByUser: async (userId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bookings/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get a single booking by ID\r\n  getBookingById: async (bookingId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bookings/${bookingId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new booking\r\n  createBooking: async (bookingData) => {\r\n    try {\r\n      const response = await apiClient.post('/bookings', bookingData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update an existing booking\r\n  updateBooking: async (bookingId, bookingData) => {\r\n    try {\r\n      const response = await apiClient.put(`/bookings/${bookingId}`, bookingData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cancel a booking\r\n  cancelBooking: async (bookingId) => {\r\n    try {\r\n      const response = await apiClient.patch(`/bookings/${bookingId}/cancel`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Reschedule a booking\r\n  rescheduleBooking: async (bookingId, newSlotTime) => {\r\n    try {\r\n      const response = await apiClient.patch(`/bookings/${bookingId}/reschedule`, { slotTime: newSlotTime });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get bookings statistics\r\n  getBookingStats: async () => {\r\n    try {\r\n      const response = await apiClient.get('/bookings/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Filter bookings by date range\r\n  getBookingsByDateRange: async (startDate, endDate) => {\r\n    try {\r\n      const response = await apiClient.get('/bookings/daterange', {\r\n        params: { startDate, endDate }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Filter bookings by status\r\n  getBookingsByStatus: async (status) => {\r\n    try {\r\n      const response = await apiClient.get('/bookings/status', {\r\n        params: { status }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Export individual methods directly\r\nexport const { \r\n  getAllBookings, \r\n  getBookingsByBunk, \r\n  getBookingsByUser, \r\n  getBookingById, \r\n  createBooking, \r\n  updateBooking,\r\n  cancelBooking,\r\n  rescheduleBooking,\r\n  getBookingStats,\r\n  getBookingsByDateRange,\r\n  getBookingsByStatus\r\n} = bookingService;\r\n\r\n// Export default as named object\r\nexport default bookingService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}