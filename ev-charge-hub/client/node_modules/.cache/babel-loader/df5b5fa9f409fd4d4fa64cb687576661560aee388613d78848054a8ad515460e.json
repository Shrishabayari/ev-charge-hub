{"ast":null,"code":"var _jsxFileName = \"D:\\\\UnifiedMentor\\\\electric-charger-hub\\\\ev-charge-hub\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\n// Updated AuthContext.js - Modified to work with the new centralized refresh token endpoint\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode'; // Add this dependency: npm install jwt-decode\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userType, setUserType] = useState(null);\n\n  // Token refresh function\n  const refreshToken = useCallback(async () => {\n    try {\n      const currentToken = localStorage.getItem('token');\n      if (!currentToken) return false;\n\n      // Use the centralized token refresh endpoint\n      const res = await axios.post('/api/refresh-token', {\n        token: currentToken\n      });\n      if (res.data.token) {\n        localStorage.setItem('token', res.data.token);\n        axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\n        return true;\n      }\n      return false;\n    } catch (err) {\n      console.error('Token refresh failed:', err);\n      return false;\n    }\n  }, []);\n\n  // Check token expiration time\n  const isTokenExpiring = useCallback(() => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const decoded = jwtDecode(token);\n      // Refresh when token has less than 1 day left (in seconds)\n      return decoded.exp - Date.now() / 1000 < 86400;\n    } catch (err) {\n      return false;\n    }\n  }, []);\n\n  // Setup axios interceptor for token expiration\n  useEffect(() => {\n    // Add request interceptor to check token before requests\n    const requestInterceptor = axios.interceptors.request.use(async config => {\n      // Skip token check for refresh token requests to avoid infinite loops\n      if (config.url === '/api/refresh-token') {\n        return config;\n      }\n\n      // If token is expiring soon but still valid, try to refresh it\n      if (isTokenExpiring() && isAuthenticated) {\n        const refreshed = await refreshToken();\n        if (refreshed) {\n          const newToken = localStorage.getItem('token');\n          config.headers.Authorization = `Bearer ${newToken}`;\n        }\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Add response interceptor to handle token expiration\n    const responseInterceptor = axios.interceptors.response.use(response => response, async error => {\n      const originalRequest = error.config;\n\n      // Avoid infinite loops - don't retry refresh-token requests\n      if (originalRequest.url === '/api/refresh-token') {\n        return Promise.reject(error);\n      }\n\n      // If error is due to expired token and we haven't tried refreshing yet\n      if (error.response && error.response.status === 401 && error.response.data.expired && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        // Try to refresh the token\n        const refreshed = await refreshToken();\n        if (refreshed) {\n          // Retry the original request with new token\n          const newToken = localStorage.getItem('token');\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          return axios(originalRequest);\n        } else {\n          // If refresh failed, logout user\n          logout();\n          setError('Your session has expired. Please log in again.');\n\n          // Redirect to appropriate login page\n          window.location.href = userType === 'admin' ? '/admin/login' : '/login';\n        }\n      }\n      return Promise.reject(error);\n    });\n\n    // Clean up interceptors on unmount\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n  }, [isAuthenticated, userType, refreshToken, isTokenExpiring]);\n\n  // Load user from token on initial render\n  useEffect(() => {\n    const loadUser = async () => {\n      const token = localStorage.getItem('token');\n      const storedUserType = localStorage.getItem('userType');\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n\n      // Set user type from localStorage\n      if (storedUserType) {\n        setUserType(storedUserType);\n      }\n      try {\n        // Check if token is expiring and refresh if needed\n        if (isTokenExpiring()) {\n          const refreshed = await refreshToken();\n          if (!refreshed) throw new Error('Token refresh failed');\n        }\n\n        // Set default headers for all requests\n        const currentToken = localStorage.getItem('token');\n        axios.defaults.headers.common['Authorization'] = `Bearer ${currentToken}`;\n\n        // Use the correct endpoint based on user type\n        const endpoint = storedUserType === 'admin' ? '/api/admin/profile' : '/api/users/profile';\n        const res = await axios.get(endpoint);\n        setUser(res.data);\n        setIsAuthenticated(true);\n        setError(null);\n      } catch (err) {\n        console.error('Error loading user:', err);\n        logout();\n        setError('Authentication failed');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, [refreshToken, isTokenExpiring]);\n\n  // Login function\n  const loginUser = async (email, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/users/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('userType', 'user');\n      axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\n      setUser(res.data.user);\n      setIsAuthenticated(true);\n      setUserType('user');\n      setError(null);\n      return res.data.user;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Admin login\n  const loginAdmin = async (email, password) => {\n    try {\n      setLoading(true);\n      const res = await axios.post('/api/admin/login', {\n        email,\n        password\n      });\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('userType', 'admin');\n      axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\n      setUser(res.data.user || {\n        email\n      });\n      setIsAuthenticated(true);\n      setUserType('admin');\n      setError(null);\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Admin login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userType');\n    delete axios.defaults.headers.common['Authorization'];\n    setUser(null);\n    setIsAuthenticated(false);\n    setUserType(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      error,\n      userType,\n      loginUser,\n      loginAdmin,\n      logout,\n      refreshToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"l/oZqkzP5y9x8D9Rbyxne57b0xs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","axios","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","userType","setUserType","refreshToken","currentToken","localStorage","getItem","res","post","token","data","setItem","defaults","headers","common","err","console","isTokenExpiring","decoded","exp","Date","now","requestInterceptor","interceptors","request","use","config","url","refreshed","newToken","Authorization","Promise","reject","responseInterceptor","response","originalRequest","status","expired","_retry","logout","window","location","href","eject","loadUser","storedUserType","Error","endpoint","get","loginUser","email","password","_err$response","_err$response$data","message","loginAdmin","_err$response2","_err$response2$data","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/context/AuthContext.jsx"],"sourcesContent":["// Updated AuthContext.js - Modified to work with the new centralized refresh token endpoint\r\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport jwtDecode from 'jwt-decode'; // Add this dependency: npm install jwt-decode\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [userType, setUserType] = useState(null);\r\n  \r\n  // Token refresh function\r\n  const refreshToken = useCallback(async () => {\r\n    try {\r\n      const currentToken = localStorage.getItem('token');\r\n      if (!currentToken) return false;\r\n      \r\n      // Use the centralized token refresh endpoint\r\n      const res = await axios.post('/api/refresh-token', {\r\n        token: currentToken\r\n      });\r\n      \r\n      if (res.data.token) {\r\n        localStorage.setItem('token', res.data.token);\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (err) {\r\n      console.error('Token refresh failed:', err);\r\n      return false;\r\n    }\r\n  }, []);\r\n  \r\n  // Check token expiration time\r\n  const isTokenExpiring = useCallback(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      const decoded = jwtDecode(token);\r\n      // Refresh when token has less than 1 day left (in seconds)\r\n      return decoded.exp - (Date.now() / 1000) < 86400;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Setup axios interceptor for token expiration\r\n  useEffect(() => {\r\n    // Add request interceptor to check token before requests\r\n    const requestInterceptor = axios.interceptors.request.use(\r\n      async (config) => {\r\n        // Skip token check for refresh token requests to avoid infinite loops\r\n        if (config.url === '/api/refresh-token') {\r\n          return config;\r\n        }\r\n        \r\n        // If token is expiring soon but still valid, try to refresh it\r\n        if (isTokenExpiring() && isAuthenticated) {\r\n          const refreshed = await refreshToken();\r\n          if (refreshed) {\r\n            const newToken = localStorage.getItem('token');\r\n            config.headers.Authorization = `Bearer ${newToken}`;\r\n          }\r\n        }\r\n        return config;\r\n      },\r\n      (error) => Promise.reject(error)\r\n    );\r\n    \r\n    // Add response interceptor to handle token expiration\r\n    const responseInterceptor = axios.interceptors.response.use(\r\n      response => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n        \r\n        // Avoid infinite loops - don't retry refresh-token requests\r\n        if (originalRequest.url === '/api/refresh-token') {\r\n          return Promise.reject(error);\r\n        }\r\n        \r\n        // If error is due to expired token and we haven't tried refreshing yet\r\n        if (error.response && \r\n            error.response.status === 401 && \r\n            error.response.data.expired &&\r\n            !originalRequest._retry) {\r\n          \r\n          originalRequest._retry = true;\r\n          \r\n          // Try to refresh the token\r\n          const refreshed = await refreshToken();\r\n          \r\n          if (refreshed) {\r\n            // Retry the original request with new token\r\n            const newToken = localStorage.getItem('token');\r\n            originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n            return axios(originalRequest);\r\n          } else {\r\n            // If refresh failed, logout user\r\n            logout();\r\n            setError('Your session has expired. Please log in again.');\r\n            \r\n            // Redirect to appropriate login page\r\n            window.location.href = userType === 'admin' ? '/admin/login' : '/login';\r\n          }\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Clean up interceptors on unmount\r\n    return () => {\r\n      axios.interceptors.request.eject(requestInterceptor);\r\n      axios.interceptors.response.eject(responseInterceptor);\r\n    };\r\n  }, [isAuthenticated, userType, refreshToken, isTokenExpiring]);\r\n\r\n  // Load user from token on initial render\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const storedUserType = localStorage.getItem('userType');\r\n      \r\n      if (!token) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Set user type from localStorage\r\n      if (storedUserType) {\r\n        setUserType(storedUserType);\r\n      }\r\n\r\n      try {\r\n        // Check if token is expiring and refresh if needed\r\n        if (isTokenExpiring()) {\r\n          const refreshed = await refreshToken();\r\n          if (!refreshed) throw new Error('Token refresh failed');\r\n        }\r\n        \r\n        // Set default headers for all requests\r\n        const currentToken = localStorage.getItem('token');\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${currentToken}`;\r\n        \r\n        // Use the correct endpoint based on user type\r\n        const endpoint = storedUserType === 'admin' ? '/api/admin/profile' : '/api/users/profile';\r\n        const res = await axios.get(endpoint);\r\n        \r\n        setUser(res.data);\r\n        setIsAuthenticated(true);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Error loading user:', err);\r\n        logout();\r\n        setError('Authentication failed');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadUser();\r\n  }, [refreshToken, isTokenExpiring]);\r\n\r\n  // Login function\r\n  const loginUser = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const res = await axios.post('/api/users/login', { email, password });\r\n      \r\n      localStorage.setItem('token', res.data.token);\r\n      localStorage.setItem('userType', 'user');\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\r\n      \r\n      setUser(res.data.user);\r\n      setIsAuthenticated(true);\r\n      setUserType('user');\r\n      setError(null);\r\n      return res.data.user;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Login failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Admin login\r\n  const loginAdmin = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const res = await axios.post('/api/admin/login', { email, password });\r\n      \r\n      localStorage.setItem('token', res.data.token);\r\n      localStorage.setItem('userType', 'admin');\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${res.data.token}`;\r\n      \r\n      setUser(res.data.user || { email });\r\n      setIsAuthenticated(true);\r\n      setUserType('admin');\r\n      setError(null);\r\n      return res.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Admin login failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userType');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    setUserType(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        error,\r\n        userType,\r\n        loginUser,\r\n        loginAdmin,\r\n        logout,\r\n        refreshToken\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}