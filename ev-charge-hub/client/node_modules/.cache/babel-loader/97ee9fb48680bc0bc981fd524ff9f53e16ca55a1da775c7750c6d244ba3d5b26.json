{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: `${API_URL}/bookings`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to every request\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Booking service functions\nconst BookingService = {\n  // Get all bookings (admin only)\n  getAllBookings: async () => {\n    try {\n      const response = await apiClient.get('/');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching all bookings:', error);\n      throw error;\n    }\n  },\n  // Get bookings for a specific bunk\n  getBookingsByBunk: async bunkId => {\n    try {\n      const response = await apiClient.get(`/bunk/${bunkId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching bookings for bunk ${bunkId}:`, error);\n      throw error;\n    }\n  },\n  // Get current user's bookings\n  getUserBookings: async () => {\n    try {\n      const response = await apiClient.get('/user');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user bookings:', error);\n      throw error;\n    }\n  },\n  // Create a new booking\n  createBooking: async bookingData => {\n    try {\n      const response = await apiClient.post('/create', bookingData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw error;\n    }\n  },\n  // Cancel a booking\n  cancelBooking: async bookingId => {\n    try {\n      const response = await apiClient.put(`/cancel/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error cancelling booking ${bookingId}:`, error);\n      throw error;\n    }\n  },\n  // Reschedule a booking\n  rescheduleBooking: async (bookingId, newSlotData) => {\n    try {\n      const response = await apiClient.put(`/reschedule/${bookingId}`, newSlotData);\n      return response.data;\n    } catch (error) {\n      console.error(`Error rescheduling booking ${bookingId}:`, error);\n      throw error;\n    }\n  },\n  // Check if a time slot is available\n  checkSlotAvailability: async slotData => {\n    try {\n      const response = await apiClient.post('/check-availability', slotData);\n      return response.data;\n    } catch (error) {\n      console.error('Error checking slot availability:', error);\n      throw error;\n    }\n  },\n  // Get available slots for a bunk on a specific date\n  getAvailableSlots: async (bunkId, date) => {\n    try {\n      const response = await apiClient.get(`/available-slots/${bunkId}/${date}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching available slots for bunk ${bunkId} on ${date}:`, error);\n      throw error;\n    }\n  },\n  // Get booking details\n  getBookingDetails: async bookingId => {\n    try {\n      const response = await apiClient.get(`/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching booking details for ${bookingId}:`, error);\n      throw error;\n    }\n  },\n  // Get booking statistics (admin only)\n  getBookingStats: async () => {\n    try {\n      const response = await apiClient.get('/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching booking statistics:', error);\n      throw error;\n    }\n  },\n  // Update booking status (admin only)\n  updateBookingStatus: async (bookingId, status) => {\n    try {\n      const response = await apiClient.patch(`/${bookingId}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating status for booking ${bookingId}:`, error);\n      throw error;\n    }\n  }\n};\nexport default BookingService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","BookingService","getAllBookings","response","get","data","console","getBookingsByBunk","bunkId","getUserBookings","createBooking","bookingData","post","cancelBooking","bookingId","put","rescheduleBooking","newSlotData","checkSlotAvailability","slotData","getAvailableSlots","date","getBookingDetails","getBookingStats","updateBookingStatus","status","patch"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/services/BookingService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: `${API_URL}/bookings`,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add auth token to every request\r\napiClient.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['x-auth-token'] = token;\r\n    }\r\n    return config;\r\n  },\r\n  error => Promise.reject(error)\r\n);\r\n\r\n// Booking service functions\r\nconst BookingService = {\r\n  // Get all bookings (admin only)\r\n  getAllBookings: async () => {\r\n    try {\r\n      const response = await apiClient.get('/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching all bookings:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get bookings for a specific bunk\r\n  getBookingsByBunk: async (bunkId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bunk/${bunkId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching bookings for bunk ${bunkId}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get current user's bookings\r\n  getUserBookings: async () => {\r\n    try {\r\n      const response = await apiClient.get('/user');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user bookings:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new booking\r\n  createBooking: async (bookingData) => {\r\n    try {\r\n      const response = await apiClient.post('/create', bookingData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating booking:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cancel a booking\r\n  cancelBooking: async (bookingId) => {\r\n    try {\r\n      const response = await apiClient.put(`/cancel/${bookingId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error cancelling booking ${bookingId}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Reschedule a booking\r\n  rescheduleBooking: async (bookingId, newSlotData) => {\r\n    try {\r\n      const response = await apiClient.put(`/reschedule/${bookingId}`, newSlotData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error rescheduling booking ${bookingId}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Check if a time slot is available\r\n  checkSlotAvailability: async (slotData) => {\r\n    try {\r\n      const response = await apiClient.post('/check-availability', slotData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error checking slot availability:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get available slots for a bunk on a specific date\r\n  getAvailableSlots: async (bunkId, date) => {\r\n    try {\r\n      const response = await apiClient.get(`/available-slots/${bunkId}/${date}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching available slots for bunk ${bunkId} on ${date}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get booking details\r\n  getBookingDetails: async (bookingId) => {\r\n    try {\r\n      const response = await apiClient.get(`/${bookingId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching booking details for ${bookingId}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get booking statistics (admin only)\r\n  getBookingStats: async () => {\r\n    try {\r\n      const response = await apiClient.get('/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching booking statistics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update booking status (admin only)\r\n  updateBookingStatus: async (bookingId, status) => {\r\n    try {\r\n      const response = await apiClient.patch(`/${bookingId}/status`, { status });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error updating status for booking ${bookingId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default BookingService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}