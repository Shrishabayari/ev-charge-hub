{"ast":null,"code":"import axios from 'axios';\nimport authService from './Authservice'; // Import the AuthService we created earlier\n\n// Base configuration for API requests\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.bunkservice.com/v1';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds timeout\n});\n\n// Request interceptor for adding auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('bunk_auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor for error handling with token refresh\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response$data;\n  // Store the original request to retry it later\n  const originalRequest = error.config;\n\n  // If error is 401 (Unauthorized) and we haven't tried refreshing yet\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Attempt to refresh the token\n      const token = localStorage.getItem('bunk_auth_token');\n      if (!token) {\n        throw new Error('No token available');\n      }\n\n      // Call the refresh token endpoint\n      const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n        token\n      });\n\n      // Save the new token\n      const newToken = response.data.token;\n      localStorage.setItem('bunk_auth_token', newToken);\n\n      // Update auth header and retry original request\n      originalRequest.headers.Authorization = `Bearer ${newToken}`;\n      return axios(originalRequest);\n    } catch (refreshError) {\n      console.error('Token refresh failed:', refreshError);\n\n      // Clear token and notify the application of authentication failure\n      localStorage.removeItem('bunk_auth_token');\n\n      // Dispatch event for expired session\n      window.dispatchEvent(new CustomEvent('auth:sessionExpired'));\n\n      // Show user-friendly message\n      console.error('Your session has expired. Please log in again.');\n\n      // Redirect to login page with expired session parameter\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login?expired=true';\n      }\n    }\n  } else {\n    // Handle other error codes\n    if (error.response) {\n      switch (error.response.status) {\n        case 403:\n          console.error('You do not have permission to perform this action');\n          break;\n        case 404:\n          console.error('The requested resource was not found');\n          break;\n        case 500:\n          console.error('Server error, please try again later');\n          break;\n        default:\n          console.error(`Error: ${error.response.status} - ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Unknown error'}`);\n      }\n    } else if (error.request) {\n      console.error('Network error, please check your connection');\n    } else {\n      console.error('Error:', error.message);\n    }\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * BookingService - for managing bookings\r\n */\nexport const bookingService = {\n  // Get all bookings\n  getAllBookings: async () => {\n    try {\n      const response = await apiClient.get('/bookings');\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response2;\n      // Add more specific error handling for UI feedback\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        throw new Error('Authentication error: Please log in again');\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n        throw new Error('Permission denied: You cannot access this resource');\n      } else {\n        throw error;\n      }\n    }\n  },\n  // Get bookings for a specific bunk\n  getBookingsByBunk: async bunkId => {\n    try {\n      const response = await apiClient.get(`/bookings/bunk/${bunkId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get bookings for a specific user\n  getBookingsByUser: async userId => {\n    try {\n      const response = await apiClient.get(`/bookings/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get a single booking by ID\n  getBookingById: async bookingId => {\n    try {\n      const response = await apiClient.get(`/bookings/${bookingId}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Create a new booking\n  createBooking: async bookingData => {\n    try {\n      const response = await apiClient.post('/bookings', bookingData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Update an existing booking\n  updateBooking: async (bookingId, bookingData) => {\n    try {\n      const response = await apiClient.put(`/bookings/${bookingId}`, bookingData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Cancel a booking\n  cancelBooking: async bookingId => {\n    try {\n      const response = await apiClient.patch(`/bookings/${bookingId}/cancel`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Reschedule a booking\n  rescheduleBooking: async (bookingId, newSlotTime) => {\n    try {\n      const response = await apiClient.patch(`/bookings/${bookingId}/reschedule`, {\n        slotTime: newSlotTime\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get bookings statistics\n  getBookingStats: async () => {\n    try {\n      const response = await apiClient.get('/bookings/stats');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Filter bookings by date range\n  getBookingsByDateRange: async (startDate, endDate) => {\n    try {\n      const response = await apiClient.get('/bookings/daterange', {\n        params: {\n          startDate,\n          endDate\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Filter bookings by status\n  getBookingsByStatus: async status => {\n    try {\n      const response = await apiClient.get('/bookings/status', {\n        params: {\n          status\n        }\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Manually check & refresh token if needed\n  checkAndRefreshToken: async () => {\n    try {\n      const token = localStorage.getItem('bunk_auth_token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      // This endpoint should verify the token without requiring a valid token itself\n      const response = await axios.post(`${API_BASE_URL}/auth/verify-token`, {\n        token\n      });\n\n      // If token is expired or about to expire, refresh it\n      if (response.data.isExpiring || response.data.isExpired) {\n        const refreshResponse = await axios.post(`${API_BASE_URL}/auth/refresh`, {\n          token\n        });\n        localStorage.setItem('bunk_auth_token', refreshResponse.data.token);\n        return {\n          success: true,\n          message: 'Token refreshed successfully'\n        };\n      }\n      return {\n        success: true,\n        message: 'Token is valid'\n      };\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      localStorage.removeItem('bunk_auth_token');\n      return {\n        success: false,\n        message: 'Token verification failed'\n      };\n    }\n  }\n};\n\n// Create an event listener for session expiration\nwindow.addEventListener('auth:sessionExpired', () => {\n  // This could trigger a modal or notification in your app\n  // Example: Show a toast notification or modal dialog\n  if (typeof showAuthModal === 'function') {\n    showAuthModal('Your session has expired. Please log in again.');\n  }\n});\n\n// Export individual methods directly\nexport const {\n  getAllBookings,\n  getBookingsByBunk,\n  getBookingsByUser,\n  getBookingById,\n  createBooking,\n  updateBooking,\n  cancelBooking,\n  rescheduleBooking,\n  getBookingStats,\n  getBookingsByDateRange,\n  getBookingsByStatus,\n  checkAndRefreshToken\n} = bookingService;\n\n// Export default as named object\nexport default bookingService;","map":{"version":3,"names":["axios","authService","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","timeout","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response$data","originalRequest","status","_retry","Error","post","newToken","data","setItem","refreshError","console","removeItem","window","dispatchEvent","CustomEvent","location","pathname","href","message","bookingService","getAllBookings","get","_error$response","_error$response2","getBookingsByBunk","bunkId","getBookingsByUser","userId","getBookingById","bookingId","createBooking","bookingData","updateBooking","put","cancelBooking","patch","rescheduleBooking","newSlotTime","slotTime","getBookingStats","getBookingsByDateRange","startDate","endDate","params","getBookingsByStatus","checkAndRefreshToken","isExpiring","isExpired","refreshResponse","success","addEventListener","showAuthModal"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/services/BookingService.js"],"sourcesContent":["import axios from 'axios';\r\nimport authService from './Authservice'; // Import the AuthService we created earlier\r\n\r\n// Base configuration for API requests\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.bunkservice.com/v1';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 10000, // 10 seconds timeout\r\n});\r\n\r\n// Request interceptor for adding auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('bunk_auth_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor for error handling with token refresh\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    // Store the original request to retry it later\r\n    const originalRequest = error.config;\r\n    \r\n    // If error is 401 (Unauthorized) and we haven't tried refreshing yet\r\n    if (\r\n      error.response && \r\n      error.response.status === 401 && \r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // Attempt to refresh the token\r\n        const token = localStorage.getItem('bunk_auth_token');\r\n        if (!token) {\r\n          throw new Error('No token available');\r\n        }\r\n        \r\n        // Call the refresh token endpoint\r\n        const response = await axios.post(`${API_BASE_URL}/auth/refresh`, { token });\r\n        \r\n        // Save the new token\r\n        const newToken = response.data.token;\r\n        localStorage.setItem('bunk_auth_token', newToken);\r\n        \r\n        // Update auth header and retry original request\r\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n        return axios(originalRequest);\r\n      } catch (refreshError) {\r\n        console.error('Token refresh failed:', refreshError);\r\n        \r\n        // Clear token and notify the application of authentication failure\r\n        localStorage.removeItem('bunk_auth_token');\r\n        \r\n        // Dispatch event for expired session\r\n        window.dispatchEvent(new CustomEvent('auth:sessionExpired'));\r\n        \r\n        // Show user-friendly message\r\n        console.error('Your session has expired. Please log in again.');\r\n        \r\n        // Redirect to login page with expired session parameter\r\n        if (window.location.pathname !== '/login') {\r\n          window.location.href = '/login?expired=true';\r\n        }\r\n      }\r\n    } else {\r\n      // Handle other error codes\r\n      if (error.response) {\r\n        switch (error.response.status) {\r\n          case 403:\r\n            console.error('You do not have permission to perform this action');\r\n            break;\r\n          case 404:\r\n            console.error('The requested resource was not found');\r\n            break;\r\n          case 500:\r\n            console.error('Server error, please try again later');\r\n            break;\r\n          default:\r\n            console.error(`Error: ${error.response.status} - ${error.response.data?.message || 'Unknown error'}`);\r\n        }\r\n      } else if (error.request) {\r\n        console.error('Network error, please check your connection');\r\n      } else {\r\n        console.error('Error:', error.message);\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * BookingService - for managing bookings\r\n */\r\nexport const bookingService = {\r\n  // Get all bookings\r\n  getAllBookings: async () => {\r\n    try {\r\n      const response = await apiClient.get('/bookings');\r\n      return response.data;\r\n    } catch (error) {\r\n      // Add more specific error handling for UI feedback\r\n      if (error.response?.status === 401) {\r\n        throw new Error('Authentication error: Please log in again');\r\n      } else if (error.response?.status === 403) {\r\n        throw new Error('Permission denied: You cannot access this resource');\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n\r\n  // Get bookings for a specific bunk\r\n  getBookingsByBunk: async (bunkId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bookings/bunk/${bunkId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get bookings for a specific user\r\n  getBookingsByUser: async (userId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bookings/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get a single booking by ID\r\n  getBookingById: async (bookingId) => {\r\n    try {\r\n      const response = await apiClient.get(`/bookings/${bookingId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new booking\r\n  createBooking: async (bookingData) => {\r\n    try {\r\n      const response = await apiClient.post('/bookings', bookingData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update an existing booking\r\n  updateBooking: async (bookingId, bookingData) => {\r\n    try {\r\n      const response = await apiClient.put(`/bookings/${bookingId}`, bookingData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cancel a booking\r\n  cancelBooking: async (bookingId) => {\r\n    try {\r\n      const response = await apiClient.patch(`/bookings/${bookingId}/cancel`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Reschedule a booking\r\n  rescheduleBooking: async (bookingId, newSlotTime) => {\r\n    try {\r\n      const response = await apiClient.patch(`/bookings/${bookingId}/reschedule`, { slotTime: newSlotTime });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get bookings statistics\r\n  getBookingStats: async () => {\r\n    try {\r\n      const response = await apiClient.get('/bookings/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Filter bookings by date range\r\n  getBookingsByDateRange: async (startDate, endDate) => {\r\n    try {\r\n      const response = await apiClient.get('/bookings/daterange', {\r\n        params: { startDate, endDate }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Filter bookings by status\r\n  getBookingsByStatus: async (status) => {\r\n    try {\r\n      const response = await apiClient.get('/bookings/status', {\r\n        params: { status }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Manually check & refresh token if needed\r\n  checkAndRefreshToken: async () => {\r\n    try {\r\n      const token = localStorage.getItem('bunk_auth_token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      // This endpoint should verify the token without requiring a valid token itself\r\n      const response = await axios.post(`${API_BASE_URL}/auth/verify-token`, { token });\r\n      \r\n      // If token is expired or about to expire, refresh it\r\n      if (response.data.isExpiring || response.data.isExpired) {\r\n        const refreshResponse = await axios.post(`${API_BASE_URL}/auth/refresh`, { token });\r\n        localStorage.setItem('bunk_auth_token', refreshResponse.data.token);\r\n        return { success: true, message: 'Token refreshed successfully' };\r\n      }\r\n      \r\n      return { success: true, message: 'Token is valid' };\r\n    } catch (error) {\r\n      console.error('Token verification failed:', error);\r\n      localStorage.removeItem('bunk_auth_token');\r\n      return { success: false, message: 'Token verification failed' };\r\n    }\r\n  }\r\n};\r\n\r\n// Create an event listener for session expiration\r\nwindow.addEventListener('auth:sessionExpired', () => {\r\n  // This could trigger a modal or notification in your app\r\n  // Example: Show a toast notification or modal dialog\r\n  if (typeof showAuthModal === 'function') {\r\n    showAuthModal('Your session has expired. Please log in again.');\r\n  }\r\n});\r\n\r\n// Export individual methods directly\r\nexport const { \r\n  getAllBookings, \r\n  getBookingsByBunk, \r\n  getBookingsByUser, \r\n  getBookingById, \r\n  createBooking, \r\n  updateBooking,\r\n  cancelBooking,\r\n  rescheduleBooking,\r\n  getBookingStats,\r\n  getBookingsByDateRange,\r\n  getBookingsByStatus,\r\n  checkAndRefreshToken\r\n} = bookingService;\r\n\r\n// Export default as named object\r\nexport default bookingService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}