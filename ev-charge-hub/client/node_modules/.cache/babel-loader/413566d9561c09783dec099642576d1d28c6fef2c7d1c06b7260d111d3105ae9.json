{"ast":null,"code":"// src/services/bookingService.js\nimport axios from 'axios';\n\n// Get token from localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Create auth header\nconst authHeader = () => {\n  const token = getToken();\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n// Get all bookings (admin only)\nexport const getAllBookings = async () => {\n  try {\n    const response = await axios.get('/api/admin/bookings', {\n      headers: authHeader()\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get bookings for a specific bunk\nexport const getBookingsByBunk = async bunkId => {\n  try {\n    const response = await axios.get(`/api/bookings/bunk/${bunkId}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get current user's bookings\nexport const getUserBookings = async () => {\n  try {\n    const response = await axios.get('/api/bookings/user', {\n      headers: authHeader()\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Create a new booking\nexport const createBooking = async bookingData => {\n  try {\n    const response = await axios.post('/api/bookings/create', bookingData, {\n      headers: authHeader()\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Cancel a booking\nexport const cancelBooking = async bookingId => {\n  try {\n    const response = await axios.put(`/api/bookings/cancel/${bookingId}`, {}, {\n      headers: authHeader()\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Reschedule a booking\nexport const rescheduleBooking = async (bookingId, newSlotTime) => {\n  try {\n    const response = await axios.put(`/api/bookings/reschedule/${bookingId}`, {\n      newSlotTime\n    }, {\n      headers: authHeader()\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Check slot availability\nexport const checkSlotAvailability = async (bunkId, slotTime) => {\n  try {\n    const response = await axios.post('/api/bookings/check-availability', {\n      bunkId,\n      slotTime\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Get available slots for a specific date and bunk\nexport const getAvailableSlots = async (bunkId, date) => {\n  try {\n    const response = await axios.get(`/api/bookings/available-slots/${bunkId}/${date}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getToken","localStorage","getItem","authHeader","token","Authorization","getAllBookings","response","get","headers","data","error","getBookingsByBunk","bunkId","getUserBookings","createBooking","bookingData","post","cancelBooking","bookingId","put","rescheduleBooking","newSlotTime","checkSlotAvailability","slotTime","getAvailableSlots","date"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/services/BookingService.js"],"sourcesContent":["// src/services/bookingService.js\r\nimport axios from 'axios';\r\n\r\n// Get token from localStorage\r\nconst getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// Create auth header\r\nconst authHeader = () => {\r\n  const token = getToken();\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n// Get all bookings (admin only)\r\nexport const getAllBookings = async () => {\r\n  try {\r\n    const response = await axios.get('/api/admin/bookings', {\r\n      headers: authHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get bookings for a specific bunk\r\nexport const getBookingsByBunk = async (bunkId) => {\r\n  try {\r\n    const response = await axios.get(`/api/bookings/bunk/${bunkId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get current user's bookings\r\nexport const getUserBookings = async () => {\r\n  try {\r\n    const response = await axios.get('/api/bookings/user', {\r\n      headers: authHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new booking\r\nexport const createBooking = async (bookingData) => {\r\n  try {\r\n    const response = await axios.post('/api/bookings/create', bookingData, {\r\n      headers: authHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cancel a booking\r\nexport const cancelBooking = async (bookingId) => {\r\n  try {\r\n    const response = await axios.put(`/api/bookings/cancel/${bookingId}`, {}, {\r\n      headers: authHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Reschedule a booking\r\nexport const rescheduleBooking = async (bookingId, newSlotTime) => {\r\n  try {\r\n    const response = await axios.put(`/api/bookings/reschedule/${bookingId}`, \r\n      { newSlotTime }, \r\n      { headers: authHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check slot availability\r\nexport const checkSlotAvailability = async (bunkId, slotTime) => {\r\n  try {\r\n    const response = await axios.post('/api/bookings/check-availability', {\r\n      bunkId,\r\n      slotTime\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get available slots for a specific date and bunk\r\nexport const getAvailableSlots = async (bunkId, date) => {\r\n  try {\r\n    const response = await axios.get(`/api/bookings/available-slots/${bunkId}/${date}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}