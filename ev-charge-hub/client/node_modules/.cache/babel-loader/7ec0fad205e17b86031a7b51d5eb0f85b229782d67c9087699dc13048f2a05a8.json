{"ast":null,"code":"// Quick fix function - add this to your AdminBookingsList component\nconst clearTokensAndRedirect = () => {\n  // Clear all possible token storage locations\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('token');\n  localStorage.removeItem('userToken');\n  sessionStorage.removeItem('authToken');\n  alert('Your session has expired. Please log in again.');\n  window.location.href = '/admin/login'; // or use navigate('/admin/login')\n};\n\n// utils/tokenManager.js\nimport axios from 'axios';\nclass TokenManager {\n  constructor() {\n    this.isRefreshing = false;\n    this.failedQueue = [];\n  }\n  getToken() {\n    return localStorage.getItem('authToken') || localStorage.getItem('token') || localStorage.getItem('userToken') || sessionStorage.getItem('authToken');\n  }\n  getRefreshToken() {\n    return localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');\n  }\n  setTokens(accessToken, refreshToken = null) {\n    localStorage.setItem('authToken', accessToken);\n    if (refreshToken) {\n      localStorage.setItem('refreshToken', refreshToken);\n    }\n  }\n  clearTokens() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('token');\n    localStorage.removeItem('userToken');\n    localStorage.removeItem('refreshToken');\n    sessionStorage.removeItem('authToken');\n    sessionStorage.removeItem('refreshToken');\n  }\n  async refreshAccessToken() {\n    const refreshToken = this.getRefreshToken();\n    if (!refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    try {\n      const response = await axios.post('/api/auth/refresh', {\n        refreshToken: refreshToken\n      });\n      if (response.data.success) {\n        const {\n          accessToken,\n          refreshToken: newRefreshToken\n        } = response.data;\n        this.setTokens(accessToken, newRefreshToken);\n        return accessToken;\n      } else {\n        throw new Error('Token refresh failed');\n      }\n    } catch (error) {\n      this.clearTokens();\n      throw error;\n    }\n  }\n\n  // Setup axios interceptor for automatic token refresh\n  setupAxiosInterceptors(navigate) {\n    // Request interceptor to add token\n    axios.interceptors.request.use(config => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Response interceptor to handle token expiration\n    axios.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        if (this.isRefreshing) {\n          // If already refreshing, queue the request\n          return new Promise((resolve, reject) => {\n            this.failedQueue.push({\n              resolve,\n              reject\n            });\n          }).then(token => {\n            originalRequest.headers.Authorization = `Bearer ${token}`;\n            return axios(originalRequest);\n          }).catch(err => Promise.reject(err));\n        }\n        originalRequest._retry = true;\n        this.isRefreshing = true;\n        try {\n          const newToken = await this.refreshAccessToken();\n\n          // Process failed queue\n          this.failedQueue.forEach(({\n            resolve\n          }) => {\n            resolve(newToken);\n          });\n          this.failedQueue = [];\n          this.isRefreshing = false;\n\n          // Retry original request\n          originalRequest.headers.Authorization = `Bearer ${newToken}`;\n          return axios(originalRequest);\n        } catch (refreshError) {\n          // Refresh failed, redirect to login\n          this.failedQueue.forEach(({\n            reject\n          }) => {\n            reject(refreshError);\n          });\n          this.failedQueue = [];\n          this.isRefreshing = false;\n          this.clearTokens();\n          if (navigate) {\n            navigate('/admin/login');\n          }\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n}\nexport default new TokenManager();","map":{"version":3,"names":["clearTokensAndRedirect","localStorage","removeItem","sessionStorage","alert","window","location","href","axios","TokenManager","constructor","isRefreshing","failedQueue","getToken","getItem","getRefreshToken","setTokens","accessToken","refreshToken","setItem","clearTokens","refreshAccessToken","Error","response","post","data","success","newRefreshToken","error","setupAxiosInterceptors","navigate","interceptors","request","use","config","token","headers","Authorization","Promise","reject","_error$response","originalRequest","status","_retry","resolve","push","then","catch","err","newToken","forEach","refreshError"],"sources":["D:/UnifiedMentor/electric-charger-hub/ev-charge-hub/client/src/components/admin/AdminBookingList.jsx"],"sourcesContent":["// Quick fix function - add this to your AdminBookingsList component\r\nconst clearTokensAndRedirect = () => {\r\n  // Clear all possible token storage locations\r\n  localStorage.removeItem('authToken');\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('userToken');\r\n  sessionStorage.removeItem('authToken');\r\n  \r\n  alert('Your session has expired. Please log in again.');\r\n  window.location.href = '/admin/login'; // or use navigate('/admin/login')\r\n};\r\n\r\n// utils/tokenManager.js\r\nimport axios from 'axios';\r\n\r\nclass TokenManager {\r\n  constructor() {\r\n    this.isRefreshing = false;\r\n    this.failedQueue = [];\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem('authToken') || \r\n           localStorage.getItem('token') || \r\n           localStorage.getItem('userToken') ||\r\n           sessionStorage.getItem('authToken');\r\n  }\r\n\r\n  getRefreshToken() {\r\n    return localStorage.getItem('refreshToken') || \r\n           sessionStorage.getItem('refreshToken');\r\n  }\r\n\r\n  setTokens(accessToken, refreshToken = null) {\r\n    localStorage.setItem('authToken', accessToken);\r\n    if (refreshToken) {\r\n      localStorage.setItem('refreshToken', refreshToken);\r\n    }\r\n  }\r\n\r\n  clearTokens() {\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userToken');\r\n    localStorage.removeItem('refreshToken');\r\n    sessionStorage.removeItem('authToken');\r\n    sessionStorage.removeItem('refreshToken');\r\n  }\r\n\r\n  async refreshAccessToken() {\r\n    const refreshToken = this.getRefreshToken();\r\n    \r\n    if (!refreshToken) {\r\n      throw new Error('No refresh token available');\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('/api/auth/refresh', {\r\n        refreshToken: refreshToken\r\n      });\r\n\r\n      if (response.data.success) {\r\n        const { accessToken, refreshToken: newRefreshToken } = response.data;\r\n        this.setTokens(accessToken, newRefreshToken);\r\n        return accessToken;\r\n      } else {\r\n        throw new Error('Token refresh failed');\r\n      }\r\n    } catch (error) {\r\n      this.clearTokens();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Setup axios interceptor for automatic token refresh\r\n  setupAxiosInterceptors(navigate) {\r\n    // Request interceptor to add token\r\n    axios.interceptors.request.use(\r\n      (config) => {\r\n        const token = this.getToken();\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => Promise.reject(error)\r\n    );\r\n\r\n    // Response interceptor to handle token expiration\r\n    axios.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n          if (this.isRefreshing) {\r\n            // If already refreshing, queue the request\r\n            return new Promise((resolve, reject) => {\r\n              this.failedQueue.push({ resolve, reject });\r\n            }).then(token => {\r\n              originalRequest.headers.Authorization = `Bearer ${token}`;\r\n              return axios(originalRequest);\r\n            }).catch(err => Promise.reject(err));\r\n          }\r\n\r\n          originalRequest._retry = true;\r\n          this.isRefreshing = true;\r\n\r\n          try {\r\n            const newToken = await this.refreshAccessToken();\r\n            \r\n            // Process failed queue\r\n            this.failedQueue.forEach(({ resolve }) => {\r\n              resolve(newToken);\r\n            });\r\n            this.failedQueue = [];\r\n            this.isRefreshing = false;\r\n\r\n            // Retry original request\r\n            originalRequest.headers.Authorization = `Bearer ${newToken}`;\r\n            return axios(originalRequest);\r\n          } catch (refreshError) {\r\n            // Refresh failed, redirect to login\r\n            this.failedQueue.forEach(({ reject }) => {\r\n              reject(refreshError);\r\n            });\r\n            this.failedQueue = [];\r\n            this.isRefreshing = false;\r\n            \r\n            this.clearTokens();\r\n            if (navigate) {\r\n              navigate('/admin/login');\r\n            }\r\n            return Promise.reject(refreshError);\r\n          }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default new TokenManager();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}